{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "A template to create a single Puppet Master",
  "Parameters" : {

  	"KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "Default" : "global", 
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    
    "DNSName": {
      "Description" : "DNS name of the puppet master",
      "Type": "String",
      "Default" : "puppet.aws.ledcom.ch", 
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[a-zA-Z\\.]*",
      "ConstraintDescription" : "can contain only letters and point."
    }, 

    "DNSInternalName": {
      "Description" : "DNS name of the puppet master from inside Amazon network",
      "Type": "String",
      "Default" : "puppet.int.aws.ledcom.ch", 
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[a-zA-Z\\.]*",
      "ConstraintDescription" : "can contain only letters and point."
    },

    "DNSHostedZoneName": {
      "Description" : "DNS zone in which to create entries",
      "Type": "String",
      "Default" : "aws.ledcom.ch.", 
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[a-zA-Z\\.]*",
      "ConstraintDescription" : "can contain only letters and point."
    }, 
    
    "PuppetmasterGitRepo": {
      "Description" : "URL of the Git repository containing the puppet master modules",
      "Type": "String",
      "Default" : "https://github.com/gehel/puppetmaster.git", 
      "MinLength": "1",
      "MaxLength": "255"
    },
    
    "HieraPrivateKey": {
      "Description" : "Hiera private key, encoded with 'base64 -w 0'",
      "NoEcho": "true",
      "Type": "String",
      "Default" : "", 
      "MinLength": "0",
      "MaxLength": "4000"
    },

    "HieraPublicKey": {
      "Description" : "Hiera public key, encoded with 'base64 -w 0'",
      "Type": "String",
      "Default" : "", 
      "MinLength": "0",
      "MaxLength": "4000"
    }, 
    
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-33a68f5a", "64" : "ami-0da18864", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-8ebd8dcb", "64" : "ami-96bd8dd3", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-2"      : { "32" : "ami-6a98fc5a", "64" : "ami-7298fc42", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-66836b11", "64" : "ami-8e826af9", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-1" : { "32" : "ami-28efbb7a", "64" : "ami-20efbb72", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "ami-7774eb4d", "64" : "ami-7b74eb41", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-53a0c252", "64" : "ami-17a0c216", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "ami-8f4fee92", "64" : "ami-954fee88", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },
  
  "Resources" : {
  	"Puppetmaster" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        { "Ref" : "AWS::Region" },
                        { "Fn::FindInMap" : [
                          "AWSInstanceType2Arch",
                          { "Ref" : "InstanceType" },
                          "Arch"
                        ]}
                      ]},
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "PuppetmasterSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          
          "echo 'create a few needed files' >> /var/log/cloud-user-script.log 2>&1\n",
          "mkdir -p /etc/facter/facts.d/ >> /var/log/cloud-user-script.log 2>&1\n",
          "cat > /etc/facter/facts.d/server_role.txt << EOF\n",
          "server_role=puppetmaster\n",
          "EOF\n",

          "cat > /etc/r10k.yaml << EOF\n",
          ":cachedir: '/var/cache/r10k'\n",
          ":sources:\n",
          "  :plops:\n",
          "    remote: '", { "Ref": "PuppetmasterGitRepo" }, "'\n",
          "    basedir: '/etc/puppet/environments'\n",
          ":purgedirs:\n",
          "  - '/etc/puppet/environments'\n",
          "EOF\n",
          
          "mkdir -p /etc/puppet/ >> /var/log/cloud-user-script.log 2>&1\n",
          
          "echo ", { "Ref": "HieraPrivateKey" }, " |  base64 -d > /etc/puppet/private_key.pkcs7.pem\n",

          "echo ", { "Ref": "HieraPublicKey" }, " | base64 -d  > /etc/puppet/public_key.pkcs7.pem\n",

          "echo \"127.0.0.1       ", { "Ref": "DNSName" }, "\" >> /etc/hosts\n",

          "echo 'make sure everything is up to date' >> /var/log/cloud-user-script.log 2>&1\n",
          "wget http://apt.puppetlabs.com/puppetlabs-release-wheezy.deb >> /var/log/cloud-user-script.log 2>&1\n",
          "dpkg -i puppetlabs-release-wheezy.deb >> /var/log/cloud-user-script.log 2>&1\n",
          "apt-get update >> /var/log/cloud-user-script.log 2>&1\n",
          "apt-get dist-upgrade -y >> /var/log/cloud-user-script.log 2>&1\n",

          "echo 'install puppet and dependencies' >> /var/log/cloud-user-script.log 2>&1\n",
          "/usr/sbin/locale-gen enUS.utf8\n",
          "export LANGUAGE=en_US.utf8\n",
          "export LC_ALL=en_US.utf8\n",
          "export LANG=en_US.utf8\n",
          "export >> /var/log/cloud-user-script.log\n",
          "apt-get install -y unattended-upgrades puppetmaster git rubygems ruby-systemu ruby-log4r libsystemu-ruby liblog4r-ruby >> /var/log/cloud-user-script.log 2>&1\n",
          "gem install r10k >> /var/log/cloud-user-script.log 2>&1\n",
          "gem install hiera-eyaml >> /var/log/cloud-user-script.log 2>&1\n",
 
          "/usr/local/bin/r10k deploy environment >> /var/log/cloud-user-script.log 2>&1\n",
 
          "echo 'remove current puppet certificate, and regenerated with correct alt_names' >> /var/log/cloud-user-script.log 2>&1\n",
          "service puppetmaster stop >> /var/log/cloud-user-script.log 2>&1\n",
          "puppet cert clean --all ", { "Ref": "DNSInternalName" }, " >> /var/log/cloud-user-script.log 2>&1\n",
          "puppet ca generate --dns-alt-names ", { "Ref": "DNSName" }, " ", { "Ref": "DNSInternalName" }, "  >> /var/log/cloud-user-script.log 2>&1\n",

          "service puppetmaster start >> /var/log/cloud-user-script.log 2>&1\n",
          "service puppetmaster stop >> /var/log/cloud-user-script.log 2>&1\n",
 
          "echo 'puppet run to ensure basic configuration' >> /var/log/cloud-user-script.log 2>&1\n",
          "puppet apply",
          "  --modulepath=/etc/puppet/environments/production/modules:/etc/puppet/environments/production/dist",
          "  --hiera_config=/etc/puppet/environments/production/hiera.yaml",
          "  /etc/puppet/environments/production/site/site.pp >> /var/log/cloud-user-script.log 2>&1\n",

          "echo 'full puppet run to ensure server is completely created' >> /var/log/cloud-user-script.log 2>&1\n",
          "sleep 30 2>&1\n",
          "puppet agent -t >> /var/log/cloud-user-script.log 2>&1\n",

          "echo 'Installation completed' >> /var/log/cloud-user-script.log 2>&1\n"
        ]]}}
      }
    },

    "PuppetmasterDNS": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Ref" : "DNSHostedZoneName" },
        "Comment" : "Puppetmaster DNS entry",
        "Name" : { "Fn::Join" : [ "", [ { "Ref": "DNSName" }, "."]] },
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [
          { "Fn::GetAtt" : [ "Puppetmaster", "PublicIp" ] }
        ]
      }
    },

    "PuppetmasterInternalDNS": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Ref" : "DNSHostedZoneName" },
        "Comment" : "Puppetmaster DNS entry from inside Amazon network",
        "Name" : { "Fn::Join" : [ "", [ { "Ref": "DNSInternalName" }, "."]] },
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [
          { "Fn::GetAtt" : [ "Puppetmaster", "PrivateIp" ] }
        ]
      }
    },

    "PuppetmasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 8140 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "4440", "ToPort" : "4440", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8140", "ToPort" : "8140", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    }
  }
}
